package arm

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
import (
	"github.com/Azure/azure-sdk-for-go/arm/resources/resources"
	"github.com/Azure/azure-sdk-for-go/arm/storage"
	"github.com/Azure/azure-sdk-for-go/arm/network"
	"github.com/Azure/azure-sdk-for-go/arm/compute"
	
	"github.com/Azure/azure-sdk-for-go/Godeps/_workspace/src/github.com/Azure/go-autorest/autorest"
)

const (
	// APIVersion is the version of the Resources
	APIVersion = "2014-04-01-preview"

	// DefaultBaseURI is the default URI used for the service Resources
	DefaultBaseURI = "https://management.azure.com"
)

// Client aggregates all the various ARM-related clients.
type Client struct {
	baseURI        string
	subscriptionID string
	
	Authorizer	      autorest.Authorizer
	
	RequestInspector  autorest.PrepareDecorator
	ResponseInspector autorest.RespondDecorator
		
	resources       *resources.Client
	providers		*resources.ProvidersClient
	groups		    *resources.GroupsClient
	deployments		*resources.DeploymentsClient
	
	networks	    *network.VirtualNetworksClient
	subnets	        *network.SubnetsClient
	nics		    *network.InterfacesClient
	publidAddresses *network.PublicIPAddressesClient
	
	availabilitySets *compute.AvailabilitySetsClient
	virtualMachines  *compute.VirtualMachinesClient
	
	accounts         *storage.AccountsClient
}

// NewClient creates an instance of the GroupsClient client.
func NewClient(subscriptionID string, authorizer autorest.Authorizer) Client {
	return NewClientWithBaseURI(DefaultBaseURI, subscriptionID, authorizer)
}

// NewClientWithBaseURI creates an instance of the GroupsClient client.
func NewClientWithBaseURI(baseURI string, subscriptionID string, authorizer autorest.Authorizer) Client {
	return Client {
		baseURI: baseURI,
		subscriptionID: subscriptionID,
		Authorizer: authorizer,
	}
}

// Resources returns a client capable of handling the ARM resources APIs.
func (client Client) Resources() resources.Client {
	if client.resources == nil {
		clnt := resources.NewClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.resources = &clnt		
	}	
	return *client.resources
}

// Providers returns a client capable of handling the ARM resource providers APIs.
func (client Client) Providers() resources.ProvidersClient {
	if client.providers == nil {
		clnt := resources.NewProvidersClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.providers = &clnt		
	}	
	return *client.providers
}


// ResourceGroups returns a client capable of handling the ARM resources APIs.
func (client Client) ResourceGroups() resources.GroupsClient {
	if client.groups == nil {
		clnt := resources.NewGroupsClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.groups = &clnt		
	}	
	return *client.groups
}

// Deployments returns a client capable of handling the ARM resources APIs.
func (client Client) Deployments() resources.DeploymentsClient {
	if client.deployments == nil {
		clnt := resources.NewDeploymentsClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.deployments = &clnt		
	}	
	return *client.deployments
}

// StorageAccounts returns a client capable of handling the ARM storage account APIs.
func (client Client) StorageAccounts() storage.AccountsClient {
	if client.accounts == nil {
		clnt := storage.NewAccountsClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.accounts = &clnt		
	}	
	return *client.accounts
}

// VirtualNetworks returns a client capable of handling the ARM virtual network APIs.
func (client Client) VirtualNetworks() network.VirtualNetworksClient {
	if client.networks == nil {
		clnt := network.NewVirtualNetworksClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.networks = &clnt		
	}	
	return *client.networks
}

// Subnets returns a client capable of handling the ARM subnets APIs.
func (client Client) Subnets() network.SubnetsClient {
	if client.subnets == nil {
		clnt := network.NewSubnetsClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.subnets = &clnt		
	}	
	return *client.subnets
}

// NetworkInterfaces returns a client capable of handling the ARM network interfaces APIs.
func (client Client) NetworkInterfaces() network.InterfacesClient {
	if client.nics == nil {
		clnt := network.NewInterfacesClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.nics = &clnt		
	}	
	return *client.nics
}

// PublicIPAddresses returns a client capable of handling the ARM public IP addresses APIs.
func (client Client) PublicIPAddresses() network.PublicIPAddressesClient {
	if client.publidAddresses == nil {
		clnt := network.NewPublicIPAddressesClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.publidAddresses = &clnt		
	}	
	return *client.publidAddresses
}

// AvailabilitySets returns a client capable of handling the ARM availability sets APIs.
func (client Client) AvailabilitySets() compute.AvailabilitySetsClient {
	if client.availabilitySets == nil {
		clnt := compute.NewAvailabilitySetsClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.availabilitySets = &clnt		
	}	
	return *client.availabilitySets
}

// VirtualMachines returns a client capable of handling the ARM virtual machines APIs.
func (client Client) VirtualMachines() compute.VirtualMachinesClient {
	if client.virtualMachines == nil {
		clnt := compute.NewVirtualMachinesClientWithBaseURI(client.baseURI, client.subscriptionID)
		clnt.Authorizer = client.Authorizer
		clnt.RequestInspector = client.RequestInspector
		clnt.ResponseInspector = client.ResponseInspector
		client.virtualMachines = &clnt		
	}	
	return *client.virtualMachines
}

